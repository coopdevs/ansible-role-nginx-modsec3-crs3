# vim: set ft=ansible et ts=2 sw=2:
---
# Tasks for compiling Modsecurity3 and installing OWASP CRS

- name: Check if Modsecurity source code folder exists
  stat:
    path: "~/ModSecurity"
  register: modsecurity_folder

- name: Obtain Modsecurity source code for branch v3/master
  git:
    repo: "https://github.com/owasp-modsecurity/ModSecurity"
    dest: "~/ModSecurity"
    depth: 1
    version: "v3/master"
    force: yes
  when: not modsecurity_folder.stat.exists

- name: Init submodules, configure, build, make install
  command: "{{ item }}"
  args:
    chdir: "~/ModSecurity"
    creates: "/usr/local/modsecurity/lib/libmodsecurity.so"
  with_items:
    - "git submodule init"
    - "git submodule update"
    - "./build.sh"
    #- "./configure --with-lmdb --with-pcre2"
    # lmdb is meant to be faster but more chance of memory leaks
    # pcre2 should be a faster reg exp library
    - "./configure --with-pcre2"
    - "make"
    - "make install"
  when: not modsec3_present or nginx_modsec3_crs3_force_compile


- name: Obtain Modsecurity-nginx source code
  git:
    repo: "https://github.com/owasp-modsecurity/ModSecurity-nginx"
    dest: "~/ModSecurity-nginx"
    depth: 1
    force: yes
  when: not modsec3_nginx_present or nginx_modsec3_crs3_force_compile

- name: Obtain GeoIP2 module source code
  git:
    repo: "https://github.com/leev/ngx_http_geoip2_module"
    dest: "~/GeoIP2-nginx"
  when: nginx_modsec3_crs3_maxmind_enabled

- name: Download Nginx source code
  get_url:
    url: "https://nginx.org/download/nginx-{{ nginx_modsec3_crs3_nginx_version }}.tar.gz"
    dest: "/tmp/nginx-{{ nginx_modsec3_crs3_nginx_version }}.tar.gz"
  when: not modsec3_nginx_present or nginx_modsec3_crs3_force_compile

- name: Create folder for Nginx source code
  file:
    path: "~/Nginx"
    state: directory
  when: not modsec3_nginx_present or nginx_modsec3_crs3_force_compile

- name: Extract Nginx source code
  unarchive:
    src: "/tmp/nginx-{{ nginx_modsec3_crs3_nginx_version }}.tar.gz"
    dest: "~/Nginx"
    remote_src: yes
  when: not modsec3_nginx_present or nginx_modsec3_crs3_force_compile


- name: Get configure arguments
  shell:  "nginx -V  2>&1 | awk -F ':' '/configure arguments/{print $2}'"
  register: configargs
  changed_when: False
  when: not modsec3_nginx_present or nginx_modsec3_crs3_force_compile

- name: Run configure for building nginx modules
  shell: >
        CFLAGS=-Wno-error
        ./configure
        {% if ansible_distribution == 'OracleLinux' %}
        {{ configargs.stdout }} 
        {% endif %}
        --with-compat --add-dynamic-module=../../ModSecurity-nginx
        {% if nginx_modsec3_crs3_maxmind_enabled %}
        --add-dynamic-module=../../GeoIP2-nginx
        {% endif %}
        {% if nginx_modsec3_crs3_geoip_enabled %}
        --with-http_geoip_module=dynamic
        {% else %}
        --without-http_geo_module
        {% endif %}
  args:
    chdir: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}"
    creates: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}/Makefile"

- name: Run make for building Nginx modules
  shell: "{{ item }}"
  args:
    chdir: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}"
    creates: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}/objs/ngx_http_modsecurity_module.so"
  with_items:
<<<<<<< HEAD
=======
    - "CFLAGS=-Wno-error ./configure --with-compat --add-dynamic-module=../../ModSecurity-nginx"
>>>>>>> 5286972 (refactor: extract & paint)
    - "make modules"
  when: not modsec3_nginx_present or nginx_modsec3_crs3_force_compile

- name: import nginx role Debian/Ubuntu vars
  include_vars:
    file: "../jdauphant.nginx/vars/Debian.yml"
  when:
    - ansible_os_family == "Debian"

- name: import nginx role RedHat/Centos/OracleLinux vars
  include_vars:
    file: "../jdauphant.nginx/vars/Redhat.yml"
  when:
    - ansible_os_family == "RedHat"

- name: set nginx_conf_dir if not already set
  set_fact:
    nginx_conf_dir: "/etc/nginx"
  when: nginx_conf_dir is not defined

- name: Copy ModSecurity-nginx to Nginx modules folder
  copy:
    src: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}/objs/ngx_http_modsecurity_module.so"
    dest: "{{ nginx_modules_location }}"
    remote_src: yes
  when: not modsec3_nginx_present or nginx_modsec3_crs3_force_compile

- name: Copy GeoIP module to Nginx modules folder
  copy:
    src: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}/objs/ngx_http_geoip_module.so"
    dest: "{{ nginx_modules_location }}"
    remote_src: yes
  when: nginx_modsec3_crs3_geoip_enabled

    # Source /root/Nginx/nginx-1.25.4/objs/ngx_http_geoip_module.so not found

- name: Copy MaxMind module to Nginx modules folder
  copy:
    src: "~/Nginx/nginx-{{ nginx_modsec3_crs3_nginx_version }}/objs/ngx_http_geoip2_module.so"
    dest: "{{ nginx_modules_location }}"
    remote_src: yes
  when: nginx_modsec3_crs3_maxmind_enabled

- name: Create folder for Modsec config and rules
  file:
    #path: /etc/nginx/modsec
    path: "{{ nginx_conf_dir }}/modsec"
    state: directory
  when: not crs3_present or nginx_modsec3_crs3_force_compile

- name: Check if modsecurity.conf already exists
  stat:
    path: "{{ nginx_conf_dir }}/modsec/modsecurity.conf"
  register: modsecurity_conf_stat

- name: Copy recommended conf to become modsecurity.conf
  copy:
    src: "~/ModSecurity/modsecurity.conf-recommended"
    dest: "{{ nginx_conf_dir }}/modsec/modsecurity.conf"
    remote_src: yes
  when: not crs3_present or nginx_modsec3_crs3_force_compile

- name: Copy unicode.mapping file also
  copy:
    src: "~/ModSecurity/unicode.mapping"
    dest: "{{ nginx_conf_dir }}/modsec/unicode.mapping"
    remote_src: yes
  when: not crs3_present or nginx_modsec3_crs3_force_compile

- name: Activate blocking rather than detection only
  replace:
    path: "{{ nginx_conf_dir }}/modsec/modsecurity.conf"
    regexp: "SecRuleEngine DetectionOnly"
    replace: "SecRuleEngine On"
    backup: yes
  when: nginx_modsec3_crs3_block_mode == true and (not crs3_present or nginx_modsec3_crs3_force_compile)


- name: Create a main.conf from template
  template:
    src: main.conf.j2
    dest: "{{ nginx_conf_dir }}/modsec/main.conf"
  when: not crs3_present or nginx_modsec3_crs3_force_compile

- name: Obtain OWASP Modsecurity Rules
  git:
    repo: "https://github.com/coreruleset/coreruleset"
    dest: "{{ nginx_conf_dir }}/modsec/owasp-modsecurity-crs"
    version: "{{ nginx_modsec3_crs3_core_rule_set_version }}"
  when: not crs3_present or nginx_modsec3_crs3_force_compile

- name: Copy crs-setup.conf.example to become crs-setup.conf
  copy:
    src: "{{ nginx_conf_dir }}/modsec/owasp-modsecurity-crs/crs-setup.conf.example"
    dest: "{{ nginx_conf_dir }}/modsec/owasp-modsecurity-crs/crs-setup.conf"
    remote_src: yes
  when: not crs3_present or nginx_modsec3_crs3_force_compile
